#summary Register and ALU card documentation
#labels Featured,Phase-Design,Phase-Implementation

= Introduction =

The register and Alu card includes most of the datapath of Magic-1, who receives control signals from Control card in order to execute each microinstruction of Magic-1 programs.


= Details =

This card will be described and will include the following parts:
  * ALU
  * General Registers
    # Register A
    # Register B
    # Register C
    # Register DP
    # Register SP
    # Register SSP
    # Register PC
    # Register TPC
  * MDR
  * MSW
  * Special Registers
    # Register MAR

==ALU==
The ALU will handle all logic and arithimetic operations of Magic-1, ALU operands will be the L and R bus and will post the results in the Z bus, the ALU can also work with 8/16 bits wich is controled by the "aluop_size" opcode bit.

Magic-1 ALU will handle the following operations:
    # Operation AND
    # Operation SUB
    # Operation ADD
    # Operation determined in IR(1..3)

The ALU card were made with 74F381 (ALU) chip wich has much more operations but for simplicity m1(Magic-1) will use just this operations:
|| *Code* || *Operation* ||
|| 0 || _Not used_ ||
|| 1 || _Not used_  ||
|| 2 || sub ||
|| 3 || add ||
|| 4 || xor ||
|| 5 || or ||
|| 6 || and ||
|| 7 || _Not used_ ||

Let's make an example on how IR(1..3) bits is used to select some ALU operation
"XOR.16 A,A" , on the * [MicroinstructionBits microinstruction listing]* you will verify that his value is 0x46 wich in binary is *01001100* if you select the 1..3 bits (Remember we're big endian guys) we will have the value *100* wich will select the operation 4 in our table above.

* [MicroinstructionBits microinstruction listing]

Here is the link for the ALU VHDL description:

[http://code.google.com/p/fpga-magic-1/source/browse/trunk/ALU.vhd]